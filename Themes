How to write themes for Qingy
*****************************

Qingy Themes
************

   Qingy  is completely customizable in its appearence through a
theming interface. We shall see how these themes are made and used and
what is possible to be done with themes in Qingy.

Compatibility note
==================

   Settings and theme file syntax and semantics have radically changed
since version 0.2. Hence, old-style themes are no longer compatible with
Qingy.  Please read thouroughly this file and change your themes
appropriately.

Introduction to themes
======================

   For qingy 0.2, a theme was a subdirectory in `/etc/qingy'.  The name
of this directory was the name of the theme.  You could select a theme
by editing `/etc/qingy/settings' and modifying the line `THEME default'
with the name of the theme you wanted to use (e.g.: `THEME playboy').

   This is still true in Qingy  although the rules vary.

   Still, it is also possible to define themes in a different way:
directly in the settings file. This way, you might have some properties
which are always set in a certain way, while others are set by the
theme files.

   It is also possible to include many theme files. The rules will be
added incrementally: that is, new settings will override old ones.

Themes using theme files
========================

   As said, a theme may be a directory in `/etc/qingy'. The
subdirectory name will be the name of the theme.

   In this directory, you should put:
   * A background image.

   * A font file supported by DirectFB. TTF fonts are OK.

   * Two images for each button you want, one for it's normal appearance
     (filename: ``stem'_normal.png'), one for when mouse passes over it
     (filename:``stem'_mouseover.png').

     `stem' is a name of your choice, but must be the same for the same
     button.

   * A config file (filename:`theme'). See forward to know how to write
     that.


The theme file
--------------

   The file called `theme' in your theme directory is what gives the
rules for your theme. You can set the actual theme there (the look and
feel of Qingy), a screensaver and the widget disposition.

   In the `theme' file, everything after a `#' is considered comment
and ignored.

Screensaver setting
...................

   You can set a screensaver putting on a line the following:
`screensaver=pixel' or `screensaver=photo "/path/to/pics"
"path/to/pics" ...'.

"Theme"
.......

   You can set a "theme" (look and feel) making a `theme{...}' block.

   Therein you can set various properties, as assignments:

`mask_text_color' =       `color'                   The color of the text
                                                    in the login window

`cursor_text_color' =     `color'                   The color of the
                                                    blinking cursor

`other_text_color' =      `color'                   The color of the text
                                                    of other windows
                                                    (such as the shutdown
                                                        window)

`background' =            `"/path/to/file"'         The background image
                                                    file pathname

`font' =                  `"/path/to/file"'         The font file pathname

`button_opacity' =        `number'                  Alpha channel value
                                                    for buttons

`window_opacity' =        `number'                  Foreground alpha
                                                    channel value of
                                                    windows

`selected_window_opacity' `number'                  Foreground alpha
=                                                   channel value for the
                                                    active window

   A `color' might be a hexadecimal quadruplet in the form of
`[aabbccdd]', which will set the red value to 0xAA, the green value to
0xBB, the blue value to 0xCC and the alpha channel value to 0xDD. Or,
it might be four decimal value comma-separated fields such as `20, 30,
40, 50', which will set the red value to 20, the green value to 30, the
blue value to 40 and the alpha channel value to 50. The opacity numbers
must be unsigned integer decimal values, ranging from 0 to 255.

Windows
.......

   Finally, you can define windows on your screen. In Qingy, a "window"
is any visible widget to be displayed.

   Each window is defined inside a `window{...}' block.  Therein you
can define some fields to define the position, size and behaviour of
the window.

   The fields you can set are the following:

`x' =          `number'    The left column of the window

`y' =          `number'    The top row of the window

`height' =     `number'    The height in pixels of the window

`width' =      `number'    The width in pixels of the window

`type' =       `"type"'    The type of the window (see below)

`command' =    `"command"' Command to be executed (see below)

`content' =    `"content"' Content of the widget (see below)

`polltime' =   `number'    Seconds interval for command polling
                           (see below)

   The type of a window must be one in the following:
`label'
     Displays a text label with a certain text at given position.

     The displayed text can be either static, given as the `content'
     field or dynamic, as the output of a shell command, given in the
     `command' field. In this case, the command is run every `polltime'
     seconds and its output redisplayed. If polltime is set to 0,
     command is executed just once.

`button'
     Displays a button at given position.

     Command must be one of `halt', `reboot', `sleep' or `screensave'.

     Commands `halt' and `reboot' will be executed (hence halting the
     system or rebooting it) following the "shutdown policy" .

     In the `content' field, you should put a `/path/to/stem'. You
     should also have files `/path/to/stem_normal.png' and
     `/path/to/stem_mouseover.png'. These are two images that will be
     used to display your button respectively normally and when the
     mouse is on them.

`login'
     A login text box. Users will have to write their username here in
     order to log in. There should be always one and just one of these
     on your window. Having none will result in displaying a default
     one, having more than one will result in an error.

`password'
     A login text box. Users will have to write their password here in
     order to log in. There should be always one and just one of these
     on your window. Having none will result in displaying a default
     one, having more than one will result in an error.

`combo'
     Displays a combo box at given position.

     The only command supported so far is `sessions'. It will let user
     choose which session run at login.


   Whenever a field is set for a window with a type not using that
field, the value of the field is silently ignored.

theme file examples
-------------------

   We shall see some examples of the file `theme' of a theme.

A basic theme
.............

     # basic theme for Qingy 0.3
     # by Paolo Gianrossi
     
     theme {
           background = "bg.png"
           font = "decker.ttf"
           window_opacity = 240
           selected_window_opacity = 255
           mask_text_color = 90, 200, 90
           cursor_text_color = 90, 200, 90
           other_text_color = 90, 200, 90
     }

   In this case, only the look and feel was set. No buttons are used,
hence `button_opacity' is not defined. Color is uniform, a greenish
fade. The selected window is more vivid than the rest, due to
`selected_window_opacity'.

A complete theme
................

   #complete theme for Qingy 0.3 #by Paolo Gianrossi
     screensaver photo "/usr/share/pics", "/mnt/windows/Documents\ and\ Settings/Default\ User/My\ Documents/pics"
     
     window { # heading
       type="label"
       command="echo \"Welcome to \" $HOSTNAME"
       polltime=0
       x=300
       y=20
       width=200
       height=20
     }
     
     window { # login
       type="login"
       x=150
       y=75
     }
     
     window { #password
       type="password"
       x=150
       y=150
     }
     
     window { #time and uptime
       type="label"
       x=150
       y=700
       command="A=(`uptime`); echo ${A[2]} ${A[0]}"
       polltime = 1
     }
     
     window { #halt
       type="button"
       x=500
       y=700
       command="halt"
       content="halt_button" #have halt_button_normal.png and halt_button_mouseover.png
     }
     
     window { #reboot
       type="button"
       x=570
       y=700
       command="reboot"
       content="reset_button"
     }
     
     window { #screensaver
       type="button"
       x=640
       y=700
       command="screensave"
       content="scrsv_button"
     }
     
     
     window { #freeze
       type="button"
       x=710
       y=700
       command="freeze"
       content="reset_button"
     }
     
     theme{
             background="mybg.png"
             font="decker.ttf"
             mask_text_color= [c0c0c0ff] #grey
             cursor_text_color= [e0e0e0ff] #lighter grey
             other_text_color = [c0c0c0ff]
             button_opacity=255
             window_opacity=230
             selected_window_opacity=255
     }

Themes using settings file
==========================

   In the setting file (`/etc/qingy/settings'), you may, since Qingy
0.3 define global theme properties exactly as you would in a theme
file: just begin a `theme{...}' section in your settings and put
everything you need there.

   Please note that, being themes incremental, you can for example do
something like this:


     #... more of the setings file, not relevant here
     
     theme="mytheme"
     
     theme{
             background="/usr/share/company_logo.png"
     }

   and you will get theme `mytheme' with `background' set to
`/usr/share/company_logo.png'.

Random themes
-------------

   You can also get a fresh new randomly selected theme from your theme
collection everytime you start Qingy (as every logout, for example).
Just put the line `theme random' in your `settings' file instead of
putting `theme="name"' and Qingy will select for you a random theme
each time.

   Remember, you can bypass some properties using the inline theme
functionality:


     theme random
     
     theme{
             background="/usr/share/company_logo.png"
     }

   is perfectly valid.

