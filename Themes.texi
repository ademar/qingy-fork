\input texinfo   @c -*-texinfo-*-
@comment $Id$
@ifnottex
@node Top, Qingy Themes, (dir), (dir)
@top How to write themes for Qingy

@insertcopying
@end ifnottex

@menu
* Qingy Themes::                

@detailmenu
 --- The Detailed Node Listing ---

Qingy Themes

* Compatibility note::          
* Introduction to themes::      
* Themes using theme files::    
* Themes using settings file::  

Themes using theme files

* The theme file::              
* theme file examples::         

The theme file

* Screensaver setting::         
* Theme::                       
* Windows::                     

theme file examples

* A basic theme::               
* A complete theme::            

Themes using settings file

* Random themes::               

@end detailmenu
@end menu

@node  Qingy Themes,  , Top, Top
@comment  node-name,  next,  previous,  up
@chapter Qingy Themes
Qingy @value(VERSION) is completely customizable in its appearence
through a theming interface. We shall see how these themes are made
and used and what is possible to be done with themes in Qingy.

@menu
* Compatibility note::          
* Introduction to themes::      
* Themes using theme files::    
* Themes using settings file::  
@end menu

@node Compatibility note, Introduction to themes, Qingy Themes, Qingy Themes
@section Compatibility note

Settings and theme file syntax and semantics have radically changed since
version 0.2. Hence, old-style themes are no longer compatible with
Qingy.  Please read thouroughly this file and change your themes
appropriately. 


@node Introduction to themes, Themes using theme files, Compatibility note, Qingy Themes
@section Introduction to themes
For qingy 0.2, a theme was a subdirectory in @file{/etc/qingy}.
The name of this directory was the name of the theme.
You could select a theme by editing @file{/etc/qingy/settings}
and modifying the line @code{THEME default} with the name of the
theme you wanted to use (e.g.: @code{THEME playboy}).

This is still true in Qingy @value(VERSION), although the rules vary. 

Still, it is also possible to define themes in a different way:
directly in the settings file. This way, you might have some
properties which are always set in a certain way, while others are set
by the theme files.

It is also possible to include many theme files. The rules will be
added incrementally: that is, new settings will override old ones.

@node  Themes using theme files, Themes using settings file, Introduction to themes, Qingy Themes
@comment  node-name,  next,  previous,  up
@section Themes using theme files

As said, a theme may be a directory in @file{/etc/qingy}. The
subdirectory name will be the name of the theme. 

In this directory, you should put: 
@itemize @bullet
@item
A background image.

@item
A font file supported by DirectFB. TTF fonts are OK.

@item
Two images for each button you want, one for it's normal appearance
(filename: @file{@code{stem}_normal.png}), one for when mouse passes
over it (filename:@file{@code{stem}_mouseover.png}).

@code{stem} is a name of your choice, but must be the same for the same button.

@item
A config file (filename:@file{theme}). See forward to know how to write that.

@end itemize

@menu
* The theme file::              
* theme file examples::         
@end menu

@node  The theme file, theme file examples, Themes using theme files, Themes using theme files
@comment  node-name,  next,  previous,  up
@subsection The theme file
The file called @file{theme} in your theme directory is what gives the
rules for your theme. You can set the actual theme there (the look and
feel of Qingy), a screensaver and the widget disposition.

In the @file{theme} file, everything after a @code{#} is considered
comment and ignored. 

@menu
* Screensaver setting::         
* Theme::                       
* Windows::                     
@end menu

@node  Screensaver setting, Theme, The theme file, The theme file
@comment  node-name,  next,  previous,  up
@subsubsection Screensaver setting

You can set a screensaver putting on a line the following:
@code{screensaver=pixel} or @code{screensaver=photo "/path/to/pics"
"path/to/pics" ...}.

@node  Theme, Windows, Screensaver setting, The theme file
@comment  node-name,  next,  previous,  up
@subsubsection ``Theme''

You can set a ``theme'' (look and feel) making a @code{theme@{...@}} block.

Therein you can set various properties, as assignments:

     @multitable @columnfractions .35 .35 .3
     @item @code{mask_text_color} =
     @tab @code{color}
     @tab The color of the text in the login window
@item
     @item @code{cursor_text_color} = 
     @tab @code{color}
     @tab The color of the blinking cursor
@item
     @item @code{other_text_color} =
     @tab @code{color}
     @tab The color of the text of other windows (such as the shutdown
     window)
@item
     @item @code{background} = 
     @tab @code{"/path/to/file"}
     @tab The background image file pathname
@item
     @item @code{font} =
     @tab @code{"/path/to/file"}
     @tab The font file pathname
@item
     @item @code{button_opacity} =
     @tab @code{number}
     @tab Alpha channel value for buttons
@item
     @item @code{window_opacity} =
     @tab @code{number}
     @tab Foreground alpha channel value of windows
@item
     @item @code{selected_window_opacity} =
     @tab @code{number}
     @tab Foreground alpha channel value for the active window
     @end multitable

A @code{color} might be a hexadecimal quadruplet in the form of
@code{[aabbccdd]}, which will set the red value to 0xAA, the green
value to 0xBB, the blue value to 0xCC and the alpha channel value to
0xDD. Or, it might be four decimal value comma-separated fields such
as @code{20, 30, 40, 50}, which will set the red value to 20, the
green value to 30, the blue value to 40 and the alpha channel value to
50. The opacity numbers must be unsigned integer decimal values,
ranging from 0 to 255.

@node   Windows,  , Theme, The theme file
@comment  node-name,  next,  previous,  up
@subsubsection Windows

Finally, you can define windows on your screen. In Qingy, a
@dfn{window} is any visible widget to be displayed. 

Each window is defined inside a @code{window@{...@}} block.  Therein
you can define some fields to define the position, size and behaviour
of the window.

The fields you can set are the following:


     @multitable @columnfractions .20 .15 .55
     @item @code{x} =
     @tab @code{number}
     @tab The left column of the window
@item
     @item @code{y} =
     @tab @code{number}
     @tab The top row of the window
@item
     @item @code{height} =
     @tab @code{number}
     @tab The height in pixels of the window
@item
     @item @code{width} =
     @tab @code{number}
     @tab The width in pixels of the window
@item
     @item @code{type} =
     @tab @code{"type"}
     @tab The type of the window (see below)
@item
     @item @code{command} = 
     @tab @code{"command"}
     @tab Command to be executed (see below)
@item
     @item @code{content} = 
     @tab @code{"content"}
     @tab Content of the widget (see below)
@item
     @item @code{polltime} =
     @tab @code{number}
     @tab Seconds interval for command polling (see below)
@end multitable
     
The type of a window must be one in the following:
@table  @samp
@item label
Displays a text label with a certain text at given position.

The displayed text can be either static, given as the @code{content}
field or dynamic, as the output of a shell command, given in the
@code{command} field. In this case, the command is run every
@code{polltime} seconds and its output redisplayed. If polltime is set
to 0, command is executed just once.

@item button
Displays a button at given position. 

Command must be one of @code{halt}, @code{reboot}, @code{sleep} or
@code{screensave}.

Commands @code{halt} and @code{reboot} will be executed (hence halting
the system or rebooting it) following the @dfn{shutdown policy}
@ifnotplaintext
     (@pxref{Shutdown policy})
@end ifnotplaintext
.

In the @code{content} field, you should put a
@code{/path/to/stem}. You should also have files
@file{/path/to/stem_normal.png} and
@file{/path/to/stem_mouseover.png}. These are two images that will be
used to display your button respectively normally and when the mouse
is on them.

@item login
A login text box. Users will have to write their username here in
order to log in. There should be always one and just one of these on
your window. Having none will result in displaying a default one,
having more than one will result in an error.

@item password
A login text box. Users will have to write their password here in
order to log in. There should be always one and just one of these on
your window. Having none will result in displaying a default one,
having more than one will result in an error.

@item combo
Displays a combo box at given position. 

The only command supported so far is @code{sessions}. It will let user
choose which session run at login.

@end table

Whenever a field is set for a window with a type not using that field,
the value of the field is silently ignored.

@node  theme file examples,  , The theme file, Themes using theme files
@comment  node-name,  next,  previous,  up
@subsection theme file examples

We shall see some examples of the file @file{theme} of a theme.

@menu
* A basic theme::               
* A complete theme::            
@end menu

@node  A basic theme, A complete theme, theme file examples, theme file examples
@comment  node-name,  next,  previous,  up
@subsubsection A basic theme
@example
# basic theme for Qingy 0.3
# by Paolo Gianrossi

theme @{
      background = "bg.png"
      font = "decker.ttf"
      window_opacity = 240
      selected_window_opacity = 255
      mask_text_color = 90, 200, 90
      cursor_text_color = 90, 200, 90
      other_text_color = 90, 200, 90
@}
@end example

In this case, only the look and feel was set. No buttons are used,
hence @code{button_opacity} is not defined. Color is uniform, a
greenish fade. The selected window is more vivid than the rest, due to
@code{selected_window_opacity}. 

@node  A complete theme,  , A basic theme, theme file examples
@comment  node-name,  next,  previous,  up
@subsubsection A complete theme
#complete theme for Qingy 0.3
#by Paolo Gianrossi
@example
screensaver photo "/usr/share/pics", "/mnt/windows/Documents\ and\ Settings/Default\ User/My\ Documents/pics"

window @{ # heading
  type="label"
  command="echo \"Welcome to \" $HOSTNAME"
  polltime=0
  x=300
  y=20
  width=200
  height=20
@}

window @{ # login 
  type="login"
  x=150
  y=75
@}

window @{ #password
  type="password"
  x=150
  y=150
@}

window @{ #time and uptime
  type="label"
  x=150
  y=700
  command="A=(`uptime`); echo $@{A[2]@} $@{A[0]@}"
  polltime = 1
@}

window @{ #halt
  type="button"
  x=500
  y=700
  command="halt"
  content="halt_button" #have halt_button_normal.png and halt_button_mouseover.png
@}

window @{ #reboot
  type="button"
  x=570
  y=700
  command="reboot"
  content="reset_button"
@}

window @{ #screensaver
  type="button"
  x=640
  y=700
  command="screensave"
  content="scrsv_button"
@}


window @{ #freeze
  type="button"
  x=710
  y=700
  command="freeze"
  content="reset_button"
@}

theme@{
        background="mybg.png"
        font="decker.ttf"
        mask_text_color= [c0c0c0ff] #grey
        cursor_text_color= [e0e0e0ff] #lighter grey
        other_text_color = [c0c0c0ff]
        button_opacity=255
        window_opacity=230
        selected_window_opacity=255
@}
@end example

@node  Themes using settings file,  , Themes using theme files, Qingy Themes
@comment  node-name,  next,  previous,  up
@section Themes using settings file

In the setting file (@file{/etc/qingy/settings}), you may, since Qingy
0.3 define global theme properties exactly as you would in a theme
file: just begin a @code{theme@{...@}} section in your settings and
put everything you need there.

Please note that, being themes incremental, you can for example do
something like this:

@example

#... more of the setings file, not relevant here

theme="mytheme"

theme@{
        background="/usr/share/company_logo.png"
@}

@end example

and you will get theme @file{mytheme} with @code{background} set to
@file{/usr/share/company_logo.png}. 

@menu
* Random themes::               
@end menu

@node  Random themes,  , Themes using settings file, Themes using settings file
@comment  node-name,  next,  previous,  up
@subsection Random themes

You can also get a fresh new randomly selected theme from your theme
collection everytime you start Qingy (as every logout, for
example). Just put the line @code{theme random} in your
@file{settings} file instead of putting @code{theme="name"} and Qingy
will select for you a random theme each time.

Remember, you can bypass some properties using the inline theme
functionality:

@example

theme random

theme@{
        background="/usr/share/company_logo.png"
@}

@end example

is perfectly valid.

@bye

