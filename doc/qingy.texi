\input texinfo   @c -*-texinfo-*-
@comment $Id$
@comment %**start of header
@setfilename qingy.info
@include version.texi
@settitle Qingy @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for Qingy
(version @value{VERSION}, @value{UPDATED}),
which is a frame-buffered getty substitute

Copyright @copyright{} 2003 Paolo Gianrossi

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".
@end quotation
@end copying

@dircategory System programs
@direntry
* qingy: (qingy).
@end direntry

@titlepage
@title Qingy user manual
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Paolo Gianrossi (@email{paolino.gnu@@disi.unige.it})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Qingy

@insertcopying
@end ifnottex

@menu
* Introduction::                
* Fetching qingy::              
* Configuration ::              
* The settings file::           
* Qingy Themes::                
* The welcomes feature::        
* Screensavers::                
* Using Qingy::                 
* Copying Qingy::               
* Copying::                     
* GNU Free Documentation License::
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Fetching qingy

* Installing from the tarball::  

Configuration 

* Line options::                

Qingy Themes

* Compatibility note::          
* Introduction to themes::      
* Themes using theme files::    
* Themes using settings file::  

Themes using theme files

* The theme file::              
* theme file examples::         

The theme file

* Screensaver setting::         
* Theme::                       
* Windows::                     

theme file examples

* A basic theme::               
* A complete theme::            

Themes using settings file

* Random themes::               

Screensavers

* Security matters with Qingy screensavers::  
* Rolling your own screensavers::  

@end detailmenu
@end menu

@node  Introduction, Fetching qingy, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

@cindex eye-candy

Qingy Is Not GettY. 
Qingy is useless anyway: it is just eye-candy for a login screen on
your box.  Still, it's just plain lovely and cool, and we are sure
that you will love it.

Qingy graphical effects are obtained perusing the framebuffer, thus
avoiding the nuisance of running an X server just to login as it
happens with the various *DMs. Also, it has some nice features, such
as text sessions as well as X sessions, a screensaver, themes to
customize it totally and much much more.

@node  Fetching qingy, Configuration , Introduction, Top
@chapter Fetching qingy

You can download the latest stable version of Qingy from SourceForge
(@uref{http://qingy.sourceforge.net}). You should get the latest
stable version, unless you are a developer or really brave: in those
cases, you might want to get the CVS version. This is the bleeding
edge version, the one we are using everyday for our small and big
changes in the code. It might even not compile (although we really try
to avoid that) and it is totally unsopported. To get this version you
will need a CVS client. You should read the huge and very deep
SourceForge CVS documentation, but something like @kbd{cvs
-d:pserver:anonymous@@cvs.sf.net:/cvsroot/qingy co qingy} might do the
trick.

Also, if you are using Gentoo as your GNU/Linux distribution, you can
@kbd{emerge qingy}.

@menu
* Installing from the tarball::  
@end menu
@node  Installing from the tarball,  , Fetching qingy, Fetching qingy
@comment  node-name,  next,  previous,  up
@section Installing from the tarball

@cindex installing
@cindex tarball
@cindex Linux

Before starting to compile qingy, you should check to have the
DirectFB library installed. You should also configure DirectFB for
your framebuffer device: run @kbd{fbset} and paste the output as the
first entry in /etc/fb.modes. 

Fetch the tarball and compile it more or less as any Linux package:
@enumerate
@item
@kbd{tar -xvzf qingy-@value{VERSION}.tar.gz}
@item
@kbd{cd qingy-@value{VERSION}}
@item
@kbd{./configure}
@item
@kbd{make}
@item
@kbd{make install}
@end enumerate

After that, you should check @file{/etc/directfbrc.qingy} (which
should have been created by Qingy itself). It should have this line in it:
@code{mode=1024x768} (change this with the actual value you got from fbset).
If for some reason you don't have such file or it does contain the
wrong stuff, please correct this manually.

Finally, you should change your @file{/etc/inittab} file from something like

@verbatim

#
# ... more stuff here 

# TERMINALS

c1:12345:respawn:/sbin/agetty 38400 tty1 linux
c2:12345:respawn:/sbin/agetty 38400 tty2 linux
c3:12345:respawn:/sbin/agetty 38400 tty3 linux
c4:12345:respawn:/sbin/agetty 38400 tty4 linux
c5:12345:respawn:/sbin/agetty 38400 tty5 linux
c6:12345:respawn:/sbin/agetty 38400 tty6 linux

# and more stuff following ...

# End of /etc/inittab
@end verbatim

to something like 

@verbatim

#
# ... more stuff here 

# TERMINALS

c1:12345:respawn:/sbin/qingy tty1  --black-screen-workaround --no-shutdown-screen
c2:12345:respawn:/sbin/qingy tty2  --black-screen-workaround --no-shutdown-screen
c3:12345:respawn:/sbin/qingy tty3  --black-screen-workaround --no-shutdown-screen
c4:12345:respawn:/sbin/agetty 38400 tty4 linux

# and more stuff following ...

# End of /etc/inittab
@end verbatim

Please note that we left a terminal (tty4) set to the old getty. This
is because Qingy is still at beta release. Thus, if something goes
wrong, this way you'll still have a way to login on your system.

Note also that we passed some options to Qingy. @c @xref{Line options}
, to see what options are available and what they do.


At this point you're ready to launch Qingy. From a shell prompt type
@kbd{init Q} and then @kbd{killall -9 agetty} (or whatever getty you
use). Logout and find Qingy running as the login manager now on the
terminals you've set for it.

@node  Configuration , The settings file, Fetching qingy, Top
@comment  node-name,  next,  previous,  up
@chapter Configuration 
Qingy is very customizable, making it possible to have almost exactly
the behaviour you want it to have. Configuration is done site-widely
and breaks down to basically two aspects: ``What it looks like'', and
``What happens when I do something''. Of course, you cannot have a
user-based configuration, as when you have Qingy running, you don't
know yet which user is sitting in front of it.

Customization is obtained in three different ways: through line
options, through the @file{/etc/qingy/settings} file and through themes.

@menu
* Line options::                
@end menu

@node  Line options,  , Configuration , Configuration
@comment  node-name,  next,  previous,  up
@section Line options

When Qingy is called by init, it is passed some options. These options
change some of Qingy behaviour in different ways. Here is a list of all possible options.

@table @code
@item --fb-device <device>
	Use <device> as framebuffer device.

@item --hide-password
	Do not show password asterisks.

@item --hide-lastuser
	Do not display last user name.

@item --disable-lastuser
	Do not remember last user name.

@item --verbose
	Display some diagnostic messages on stderr.

@item --no-shutdown-screen
	Close DirectFB mode before shutting down.
	This way you will see system shutdown messages.

@item --screensaver <timeout>
	Activate screensaver after <timeout> minutes (default is 5).
	A value of 0 disables screensaver completely.

@item --black-screen-workaround
	Try this if you get a black screen instead of a text console.
	Note: switching to another vt and back also solves the problem.

@end table

@node  The settings file, Qingy Themes, Configuration , Top
@comment  node-name,  next,  previous,  up
@chapter The ``settings'' file

The main configuration file for Qingy is
@file{/etc/qingy/settings}. All global settings for Qingy are found in
this file. 

A typical @file{settings} file might look like this: 

@verbatim

# Directory containing X sessions
x_sessions = "/etc/X11/Sessions/"

# Directory containing text mode sessions
text_sessions = "/etc/qingy/sessions/"

# Full path to the 'xinit' executable
xinit = "/usr/X11R6/bin/xinit"

screensaver "running_time"  =
                   "%H:%M:%S" 
 
# What theme do you want (you can also specify 'random')
theme = random

# theme = "default"

# Who is allowed to shut down the system?
# Allowed options are 'everyone', 'root', 'noone'

shutdown_policy = everyone

@end verbatim

It is pretty self-explicative: so let's see what else can we do with
it: @code{screensaver} can be set to any of the screensavers found in
@file{/etc/qingy/screensaver}. @xref{Screensavers} for more details
about screensavers in Qingy.

Theme can be set to random (without quotes, that means you can have an
actual theme called @samp{random}...) or to a real theme by quoting
its name (@pxref{Qingy Themes} for more details on theming in Qingy).

Also, you can set global theme settings in the @file{settings} file,
much like you'd do in a @file{theme} file (again, @pxref{Qingy Themes}
for better covering of the... well... theme). So, if you had in your
@file{settings} file something like:

@verbatim

#...

theme="default"
theme {
      background = "/var/logo.jpeg"
}

#...

@end verbatim

You'd be displaying the default theme with a different background
(namely, @file{/var/logo/jpeg}.  

@emph{Note: this nice trick doesn't actually work when it would be
most useful: along with a @code{theme = default} command. Bear with
us. We'll try to have that working soon enough...}

@node  Qingy Themes, The welcomes feature, The settings file, Top
@comment  node-name,  next,  previous,  up
@chapter Qingy Themes
Qingy @value{VERSION} is completely customizable in its appearence
through a theming interface. We shall see how these themes are made
and used and what is possible to be done with themes in Qingy.

@menu
* Compatibility note::          
* Introduction to themes::      
* Themes using theme files::    
* Themes using settings file::  
@end menu

@node Compatibility note, Introduction to themes, Qingy Themes, Qingy Themes
@section Compatibility note

Settings and theme file syntax and semantics have radically changed since
version 0.2. Hence, old-style themes are no longer compatible with
Qingy.  Please read thouroughly this file and change your themes
appropriately. 


@node Introduction to themes, Themes using theme files, Compatibility note, Qingy Themes
@section Introduction to themes
For qingy 0.2, a theme was a subdirectory in @file{/etc/qingy}.
The name of this directory was the name of the theme.
You could select a theme by editing @file{/etc/qingy/settings}
and modifying the line @code{THEME default} with the name of the
theme you wanted to use (e.g.: @code{THEME playboy}).

This is still true in Qingy @value{VERSION}, although the rules vary. 

Still, it is also possible to define themes in a different way:
directly in the settings file. This way, you might have some
properties which are always set in a certain way, while others are set
by the theme files.

It is also possible to include many theme files. The rules will be
added incrementally: that is, new settings will override old ones.

@node  Themes using theme files, Themes using settings file, Introduction to themes, Qingy Themes
@comment  node-name,  next,  previous,  up
@section Themes using theme files

As said, a theme may be a directory in @file{/etc/qingy}. The
subdirectory name will be the name of the theme. 

In this directory, you should put: 
@itemize @bullet
@item
A background image.

@item
A font file supported by DirectFB. TTF fonts are OK.

@item
Two images for each button you want, one for it's normal appearance
(filename: @file{@code{stem}_normal.png}), one for when mouse passes
over it (filename:@file{@code{stem}_mouseover.png}).

@code{stem} is a name of your choice, but must be the same for the same button.

@item
A config file (filename:@file{theme}). See forward to know how to write that.

@end itemize

@menu
* The theme file::              
* theme file examples::         
@end menu

@node  The theme file, theme file examples, Themes using theme files, Themes using theme files
@comment  node-name,  next,  previous,  up
@subsection The theme file
The file called @file{theme} in your theme directory is what gives the
rules for your theme. You can set the actual theme there (the look and
feel of Qingy), a screensaver and the widget disposition.

In the @file{theme} file, everything after a @code{#} is considered
comment and ignored. 

@menu
* Screensaver setting::         
* Theme::                       
* Windows::                     
@end menu

@node  Screensaver setting, Theme, The theme file, The theme file
@comment  node-name,  next,  previous,  up
@subsubsection Screensaver setting

You can set a screensaver putting on a line the following:
@code{screensaver=pixel} or @code{screensaver=photo "/path/to/pics"
"path/to/pics" ...}.

@node  Theme, Windows, Screensaver setting, The theme file
@comment  node-name,  next,  previous,  up
@subsubsection ``Theme''

You can set a ``theme'' (look and feel) making a @code{theme@{...@}} block.

Therein you can set various properties, as assignments:

     @multitable @columnfractions .35 .35 .3
     @item @code{mask_text_color} =
     @tab @code{color}
     @tab The color of the text in the login window
@item
     @item @code{cursor_text_color} = 
     @tab @code{color}
     @tab The color of the blinking cursor
@item
     @item @code{other_text_color} =
     @tab @code{color}
     @tab The color of the text of other windows (such as the shutdown
     window)
@item
     @item @code{background} = 
     @tab @code{"/path/to/file"}
     @tab The background image file pathname
@item
     @item @code{font} =
     @tab @code{"/path/to/file"}
     @tab The font file pathname
@item
     @item @code{button_opacity} =
     @tab @code{number}
     @tab Alpha channel value for buttons
@item
     @item @code{window_opacity} =
     @tab @code{number}
     @tab Foreground alpha channel value of windows
@item
     @item @code{selected_window_opacity} =
     @tab @code{number}
     @tab Foreground alpha channel value for the active window
     @end multitable

A @code{color} might be a hexadecimal quadruplet in the form of
@code{[aabbccdd]}, which will set the red value to 0xAA, the green
value to 0xBB, the blue value to 0xCC and the alpha channel value to
0xDD. Or, it might be four decimal value comma-separated fields such
as @code{20, 30, 40, 50}, which will set the red value to 20, the
green value to 30, the blue value to 40 and the alpha channel value to
50. The opacity numbers must be unsigned integer decimal values,
ranging from 0 to 255.

@node   Windows,  , Theme, The theme file
@comment  node-name,  next,  previous,  up
@subsubsection Windows

Finally, you can define windows on your screen. In Qingy, a
@dfn{window} is any visible widget to be displayed. 

Each window is defined inside a @code{window@{...@}} block.  Therein
you can define some fields to define the position, size and behaviour
of the window.

The fields you can set are the following:


@multitable @columnfractions .20 .15 .55
     @item @code{x} =
     @tab @code{number}
     @tab The left column of the window
@item
     @item @code{y} =
     @tab @code{number}
     @tab The top row of the window
@item
     @item @code{height} =
     @tab @code{number}
     @tab The height in pixels of the window
@item
     @item @code{width} =
     @tab @code{number}
     @tab The width in pixels of the window
@item
     @item @code{type} =
     @tab @code{"type"}
     @tab The type of the window (see below)
@item
     @item @code{command} = 
     @tab @code{"command"}
     @tab Command to be executed (see below)
@item
     @item @code{content} = 
     @tab @code{"content"}
     @tab Content of the widget (see below)
@item
     @item @code{polltime} =
     @tab @code{number}
     @tab Seconds interval for command polling (see below)
@end multitable
     
The type of a window must be one in the following:

@table @b

@item label
Displays a text label with a certain text at given position.
The displayed text can be either static, given as the @code{content}
field or dynamic, as the output of a shell command, given in the
@code{command} field. In this case, the command is run every
@code{polltime} seconds and its output redisplayed. If polltime is set
to 0, command is executed just once.

@item button
Displays a button at given position. 
Command must be one of @code{halt}, @code{reboot}, @code{sleep} or
@code{screensave}.
Commands @code{halt} and @code{reboot} will be executed (hence halting
the system or rebooting it) following the @dfn{shutdown policy}
@ifnotplaintext
     (@pxref{The settings file})
@end ifnotplaintext
.
In the @code{content} field, you should put a
@code{/path/to/stem}. You should also have files
@file{/path/to/stem_normal.png} and
@file{/path/to/stem_mouseover.png}. These are two images that will be
used to display your button respectively normally and when the mouse
is on them.

@item login
A login text box. Users will have to write their username here in
order to log in. There should be always one and just one of these on
your window. Having none will result in displaying a default one,
having more than one will result in an error.

@item password
A login text box. Users will have to write their password here in
order to log in. There should be always one and just one of these on
your window. Having none will result in displaying a default one,
having more than one will result in an error.

@item combo
Displays a combo box at given position. 
The only command supported so far is @code{sessions}. It will let user
choose which session run at login.

@end table

Whenever a field is set for a window with a type not using that field,
the value of the field is silently ignored.

@node  theme file examples,  , The theme file, Themes using theme files
@comment  node-name,  next,  previous,  up
@subsection theme file examples

We shall see some examples of the file @file{theme} of a theme.

@menu
* A basic theme::               
* A complete theme::            
@end menu

@node  A basic theme, A complete theme, theme file examples, theme file examples
@comment  node-name,  next,  previous,  up
@subsubsection A basic theme
@verbatim
# basic theme for Qingy 0.3
# by Paolo Gianrossi

theme @{
      background = "bg.png"
      font = "decker.ttf"
      window_opacity = 240
      selected_window_opacity = 255
      mask_text_color = 90, 200, 90
      cursor_text_color = 90, 200, 90
      other_text_color = 90, 200, 90
@}
@end verbatim

In this case, only the look and feel was set. No buttons are used,
hence @code{button_opacity} is not defined. Color is uniform, a
greenish fade. The selected window is more vivid than the rest, due to
@code{selected_window_opacity}. 

@node  A complete theme,  , A basic theme, theme file examples
@comment  node-name,  next,  previous,  up
@subsubsection A complete theme

@verbatim

screensaver="running_time"

theme
{	
	background = "background.png"
	font = "decker.ttf"

# opacity values, from 0 (transparent) to 255 (opaque)
	button_opacity          = 128
	window_opacity          = 128
	selected_window_opacity = 207

# Colors can be given in a hex quadruplet (values from 00 to ff)
# or via comma-separated decimals (0 to 255). Format is RGBA
#	mask_text_color   = [ 28b428ff ]
#	cursor_text_color = [ 145a14dd ]
#	other_text_color  = [ 404040ff ]
	default_text_color   = 70,70, 240, 255
	default_cursor_color = 70,  70, 240, 221
	other_text_color     =  70,70 , 255, 255
}

window
{
	# window geometry
	x      = 0
	y      = 20
	width  = 780
	height = 200

	text_size        = small
	text_orientation = center
	text_color       = 00, 0, 240, 255
	cursor_color     = 00, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type    = "label"
	content = "<INS_CMD_HERE>"
	command = "fortune -n 75 -s | perl -0p -e 's/[\n\t]/ /g' "
}

window
{
	# window geometry
	x      = 100
	y      = 220
	width  = 120
	height = 50

	text_size        = large
	text_orientation = right
	text_color       = 0, 0, 240, 255
	cursor_color     = 0, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type    = "label"
	content = "login:"
	linkto  = "login"
}

window
{
	# window geometry
	x      = 240
	y      = 220
	width  = 560
	height = 50

	text_size    = large
	text_color       = 0, 0, 240, 255
	cursor_color     = 0, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type = "login"
}

window
{
	# window geometry
	x      = 100
	y      = 295
	width  = 120
	height = 50

	text_size        = large
	text_orientation = right
	text_color       = 0, 0, 240, 255
	cursor_color     = 0, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type    = "label"
	content = "passwd:"
	linkto  = "password"
}

window
{
	# window geometry
	x      = 240
	y      = 295
	width  = 560
	height = 50

	text_size    = large
	text_color       = 0, 0, 240, 255
	cursor_color     = 0, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type = "password"
}

window
{
	# window geometry
	x      = 100
	y      = 370
	width  = 120
	height = 50

	text_size        = large
	text_orientation = right
	text_color       = 0, 0, 240, 255
	cursor_color     = 0, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type    = "label"
	content = "session:"
	linkto  = "session"
}

window
{
	# window geometry
	x      = 240
	y      = 370
	width  = 560
	height = 50

	text_size    = large
	text_color       = 0, 0, 240, 255
	cursor_color     = 0, 0,  240, 221

	# update time, 0 means do not update
	time = 0

	# window type, allowed values are:
	# "label", "button", "login", "password", "combo"
	type = "combo"

	# In this case: what text do you want to display?
	command = "sessions"
}


window
{
	# window geometry
	x    = 755
	y    = 562
	type = "button"

	# Allowed commands:
	# "halt", "reboot", "sleep", "screensaver"
	command = "halt"

	# Image prefix: will be converted to
	# "<name>_normal.png" and "<name>_mouseover.png"
	content = "power"
}

window
{
	x       = 755
	y       = 515
	type    = "button"
	command = "reboot"
	content = "reset"
}

window
{
	x       = 755
	y       = 470
	type    = "button"
	command = "screensaver"
	content = "screensaver"
}

window
{
	x       = 755
	y       = 425
	type    = "button"
	command = "sleep"
	content = "sleep"
}
@end verbatim

@node  Themes using settings file,  , Themes using theme files, Qingy Themes
@comment  node-name,  next,  previous,  up
@section Themes using settings file

In the setting file (@file{/etc/qingy/settings}), you may, since Qingy
0.3 define global theme properties exactly as you would in a theme
file: just begin a @code{theme@{...@}} section in your settings and
put everything you need there.

Please note that, being themes incremental, you can for example do
something like this:

@example

#... more of the setings file, not relevant here

theme="mytheme"

theme@{
        background="/usr/share/company_logo.png"
@}

@end example

and you will get theme @file{mytheme} with @code{background} set to
@file{/usr/share/company_logo.png}. 

@menu
* Random themes::               
@end menu

@node  Random themes,  , Themes using settings file, Themes using settings file
@comment  node-name,  next,  previous,  up
@subsection Random themes

You can also get a fresh new randomly selected theme from your theme
collection everytime you start Qingy (as every logout, for
example). Just put the line @code{theme random} in your
@file{settings} file instead of putting @code{theme="name"} and Qingy
will select for you a random theme each time.

Remember, you can bypass some properties using the inline theme
functionality:

@example

theme random

theme@{
        background="/usr/share/company_logo.png"
@}

@end example

is perfectly valid.



@node  The welcomes feature, Screensavers, Qingy Themes, Top
@comment  node-name,  next,  previous,  up
@chapter The welcomes feature

The welcomes feature in Qingy is just the natural evolution of the
``Greetings master!'' feature for root: basically it lets you define
for each user the welcome message to display. To do this, create file
@file{/etc/qingy/welcomes} and insert, one on each line, the username,
a space and just whatever you want to display. For example:

@example
paolino The answer is 42!
michele Ah! What a lovely day, my Author...
root    It's not funny... Why do you wanna log like that!?
@end example

will display @samp{The answer is 42} when I (paolino) log in, and so on (you got the point).

@emph{Note: this is still a quick hack... It will be most probably
changed (in better, hopefully) in next releases... :)}

@node  Screensavers, Using Qingy, The welcomes feature, Top
@comment  node-name,  next,  previous,  up
@chapter Screensavers

Qingy has now a modularized screensaver support: basically, you or
anyone else can write her own screensaver as a module and distribute
it. You'll just have to install it and call it from the
@file{settings} file. 

A screensaver for qingy is just a function made in a certain way, in a
module built in a certain way, stored in a certain directory. Now pay
big attention: @emph{@b{THIS IS VERY IMPORTANT: You are making Qingy
execute arbitrary code through this function!! Please go on reading!!}}

@menu
* Security matters with Qingy screensavers::  
* Rolling your own screensavers::  
@end menu

@node Security matters with Qingy screensavers, Rolling your own screensavers, Screensavers, Screensavers
@comment  node-name,  next,  previous,  up
@section Security matters with Qingy screensavers

Ok. Let's make this clear: @emph{@b{YOU SHOULDN'T INSTALL A
SCREENSAVER UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING, OR YOU REALLY
TRUST THE PERSON WHO GAVE IT TO YOU!!!!}} 

Indeed, a screensaver is just a piece of code which is executed upon
some events by Qingy: that is when you press the saver button on your
interface or the screen is idle for five minutes.  The piece of code
should basically perform a loop until someone presses a key or moves
the mouse. Inside the loop are the instructions to display something
on the screen. But what if Joe M. Alicious put in the loop some nasty
instruction like ``remove all the files on your disk and die'' or
``email to me all your passwords'' or such?  Then he would make a nice
package and post it on the web for people to download. You could get
it and install it. And the first time you try you get pain and
destruction.  So now you see what I mean with @samp{you shouldn't install a
screensaver unless you know exactly what you are doing, or you really
trust the person who gave it to you}. If you can read C, you probably
could get a glimpse of what's going on directly there in. Normally a
screensaver is quite a small file, from a few tens to maybe a couple
of hudred lines of code.  You might also ask YLE, Your Local Expert,
to check for you. Or just tell us where to get it: we'll most probably
want to try it and be sure that we will check for bad things in there
before we even compile it... :-)

Still, remember: you might get in trouble by using a screensaver you
don't totally trust.

Ah, by the way, if you have any idea on how to improve a little this
HUGE security breach, please email me (paolino@@gnu.disi.unige.it) and
tell me how. Please. 

@node  Rolling your own screensavers,  , Security matters with Qingy screensavers, Screensavers
@comment  node-name,  next,  previous,  up
@section Rolling your own screensavers

So you are one of those people that laugh if I say ``mknod florida b 5
1 is Miami Device'' @footnote{Actually if you ask why should the
console be called florida, you are a bit too scary even for me...}
and normally use words like frobnicate and foobar. And you want to
write your own Qingy screensaver, as you really see that our ones
suck. Very nice: here's how. 

First, you should remember that you are going to write Free
Software. You have to: when you include @file{screensaver_module.h},
you use code I wrote, and that comes under the GNU GPL
(@pxref{Copying} for a copy of this license). So you have to use the
same license. If you wanted to keep all your programming secrets to
yourself, you are a bad person. But if you want to make money with
your screensavers, you are a really really nice person: please
remember, you are legally authorized to sell Free Software for as much
as you manage to get from your customer. You are actually encouraged
to do it: if you do and succeed, you'll be able maybe to live on Free
Software and you'll be able to improve Free Software as your job. 


@node Using Qingy, Copying Qingy, Screensavers, Top
@comment  node-name,  next,  previous,  up
@chapter Using Qingy

Qingy has a very intuitive interface, so you should be able to use it
properly since the first time.

On your screen, you might have different widgets, due to theme and
configuration, but what you will always find are the login field, the
password field and the Sessions box. In the text fields, you can edit
normally using your keyboard. Arrows will move in the text.

@node  Copying Qingy, Index, Using Qingy, Top
@comment  node-name,  next,  previous,  up
@appendix Copying This Manual and Qingy

Qingy is Free Software. That means that you can freely use, copy,
modify Qingy. You don't even have to tell us if you do so. But if you
do, you have to let others have the same rights you do. For this
reason, Qingy comes under the GNU General Public
License. @xref{Copying}, for a copy of this License. You should read
the license before you do anything with Qingy.

Free Software needs Free Documentation. This is a Free manual.

It would be useless to have a piece of Free Software without
appropriate documentation. This documentation must, of course, be
Free. That is, you may use, copy and modify it. You can actually use,
copy, even print and publish for money, even write again whole parts
of it. You don't even have to tell us this. But you must permit others
to do the same. This manual is published under the GNU Free
Documentation License. @xref{GNU Free Documentation License}, for a
copy of this License. Before you do anything with this manual, except
maybe reading it, you should read the license.

@include gpl.texi

@include fdl.texi

@node Index,  , Copying Qingy, Top
@unnumbered Index

@printindex cp

@bye

