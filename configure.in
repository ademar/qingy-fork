AC_INIT(qingy, 0.3.0, noberasco.gnu@disi.unige.it)
AC_PREREQ(2.57)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE()

AC_GNU_SOURCE
AC_PROG_INSTALL
AC_PROG_CC
AC_PROG_RANLIB
AM_PROG_LEX
AC_PROG_YACC

# Set my own flags for gcc
if test "x$GCC" = "xyes"; then
	CPULAGS=""
	CFLAGS="-Os -fomit-frame-pointer -pipe -W -Wall"
	GCC_TEST_MESSAGE="Checking for gcc version"
	AC_MSG_CHECKING([$GCC_TEST_MESSAGE])
	GCCVERSION="`$CC -dumpversion`"
	AC_MSG_RESULT([$GCCVERSION])
	if test "`$CC -dumpversion | grep 3.`" != ""; then
		#Good! let see if we can see the system arch
		PROCESSOR=`cat /proc/cpuinfo`
		#Is our CPU a Celeron?
	  if test "`echo $PROCESSOR | grep \"Celeron\"`" != ""; then
		  CPUFLAGS="-march=pentium2"
		fi
		if test "`echo $PROCESSOR | grep \"Celeron (Coppermine)\"`" != ""; then
	 		CPUFLAGS="-march=pentium3"
		fi
		#Is our CPU a Pentium?
		if test "`echo $PROCESSOR | grep \"Pentium\"`" != ""; then
			CPUFLAGS="-march=pentium"
		fi
		#Is our CPU a Pentium II?
		if test "`echo $PROCESSOR | grep \"Pentium II\"`" != ""; then
			CPUFLAGS="-march=pentium2"
		fi
		#Is our CPU a Pentium III?
		if test "`echo $PROCESSOR | grep \"Pentium III\"`" != ""; then
			CPUFLAGS="-march=pentium3"
		fi
		#Is our CPU a Pentium 4?
		if test "`echo $PROCESSOR | grep \"Intel(R) Pentium(R) 4\"`" != ""; then
			CPUFLAGS="-march=pentium4"
		fi
		#Athlon processors
		if test "`echo $PROCESSOR | grep \"AMD Athlon(tm)\"`" != ""; then
		  CPUFLAGS="-march=athlon"
		fi
		if test "`echo $PROCESSOR | grep \"AMD Athlon(tm) MP\"`" != ""; then
		  CPUFLAGS="-march=athlon-mp"
		fi
		if test "`echo $PROCESSOR | grep \"AMD Athlon(tm) XP\"`" != ""; then
		  CPUFLAGS="-march=athlon-xp"
		fi
		#Is our CPU an Ultra Sparc?
		if test "`echo $PROCESSOR | grep \"UltraSparc\"`" != ""; then
			CPUFLAGS="-mcpu=ultrasparc"
		fi
	else
		#Alas, we can set only generic arch optimizations
		PROCESSOR=`uname -m | grep 86`
		if test "$PROCESSOR" != ""; then
			CPUFLAGS="-march=$PROCESSOR"
		fi
	fi
	if test "$CPUFLAGS" != ""; then
		echo "Applying architecture optimizations: "$CPUFLAGS
	fi
	CFLAGS="$CPUFLAGS $CFLAGS"
fi

# Check wether we are using shadow passwords
	AC_MSG_CHECKING([for shadow passwords])

	if test -a /etc/shadow; then
		AC_MSG_RESULT([found])
		CFLAGS="$CFLAGS -DSHADOW_PASSWD"
	else
		AC_MSG_RESULT([not found])
		SHADOW=""
	fi
# End check for shadow passwords

# Check for C headers
	HEADERS="fcntl.h grp.h lastlog.h paths.h pwd.h stdio.h stdlib.h string.h syslog.h \
	         time.h unistd.h linux/kd.h linux/vt.h sys/ioctl.h sys/types.h"
	if test "$SHADOW" != ""; then
		HEADERS="shadow.h $HEADERS"
	fi
	HEADERS_ERROR_MESSAGE="One or more system headers that are necessary to compile this program are missing on this system. Cannot continue."
	AC_CHECK_HEADERS([$HEADERS],,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])],)
	AC_HEADER_DIRENT
	AC_HEADER_SYS_WAIT
# End check for C headers

AC_CHECK_LIB(crypt, crypt, , , )

# Check for PAM support
	PAM=""
	AC_ARG_ENABLE(pam, AC_HELP_STRING([--enable-pam], [turn on PAM support (default is yes)]),, [enable_pam=yes])
	if test "$enable_pam" == "yes"; then
		AC_CHECK_HEADER([security/pam_appl.h],[PAM="qingy"],[PAM=""],)
		if test "$PAM" != ""; then
				AC_CHECK_HEADER([security/pam_misc.h],[PAM="qingy"],[PAM=""],)
		fi
		if test "$PAM" != ""; then
			CFLAGS="$CFLAGS -DUSE_PAM"
			LDFLAGS="$LDFLAGS -lpam -lpam_misc -ldl"
			AC_MSG_NOTICE([pam found: enabling support in qingy])
		fi		
	fi
	AC_SUBST(PAM,)
# End check for PAM support

# Check for DEBUG mode
	AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug], [turn on debugging mode (default is no)]),,)
	if test "$enable_debug" == "yes"; then
		echo "Compiling in DEBUG mode"
		CFLAGS="$CFLAGS -DDEBUG"
	fi
# End check for DEBUG mode

CFLAGS="$CFLAGS -DLinux"

# Check for DirectFB >= 0.9.18
DFB_VERSION=0.9.18
PKG_CHECK_MODULES(DIRECTFB, directfb >= $DFB_VERSION, ,
	AC_MSG_ERROR([$DIRECTFB_PKG_ERRORS
*** DirectFB $DFB_VERSION or newer is required. The latest version
*** of DirectFB is available from http://www.directfb.org/.]))
# End check for DirectFB

# Check for 'fbset' program
	AC_PATH_PROG([FBSET], [fbset], [/usr/bin/fbset], [$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin])
# End check for 'fbset'

# Let's create /etc/qingy/settings config file
	AC_PATH_PROG([XINIT], [xinit], [/usr/X11R6/bin/xinit], [$PATH:/usr/X11R6/bin:/usr/bin/X11:/usr/bin:/usr/local/bin])
	echo -n "Creating config file... "
	if test -f "media/settings"; then
		rm media/settings
	fi

	echo "# Directory containing X sessions" >> media/settings
	echo "x_sessions = \"/etc/X11/Sessions/\"" >> media/settings
	echo "# Directory containing text mode sessions" >> media/settings
	echo "text_sessions = \"/etc/qingy/sessions/\"" >> media/settings
	echo "" >> media/settings
	echo "# Full path to the 'xinit' executable" >> media/settings
	echo "xinit = \"$XINIT\"" >> media/settings
	echo "" >> media/settings
	echo "#       screensaver pixel" >> media/settings
	echo "screensaver photos =" >> media/settings
	echo "#       \"/mnt/documenti/Immagini/Spazio/Freddo\"," >> media/settings
	echo "#       \"/mnt/documenti/Immagini/Spazio/Fresco&Tiepido\"," >> media/settings
	echo "        \"/mnt/documenti/Immagini/foto screen saver\"" >> media/settings
	echo "" >> media/settings
	echo "# What theme do you want (you can also specify 'random')" >> media/settings
	echo "# theme = \"default\"" >> media/settings
	echo "" >> media/settings
	echo "# Who is allowed to shut down the system?" >> media/settings
	echo "# Allowed options are 'everyone', 'root', 'noone'" >> media/settings
	echo "# shutdown_policy = everyone" >> media/settings

	echo "done"
# End creation of config files

PREFIX=""
AC_PREFIX_DEFAULT ($PREFIX)

AC_OUTPUT([Makefile src/Makefile src/DirectFB/Makefile media/Makefile media/default/Makefile media/sessions/Makefile media/pam/Makefile doc/Makefile])
