AC_INIT([qingy],[0.9.4],[michele.noberasco@tiscali.it])
AC_PREREQ(2.59)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE([1.9 check-news dist-bzip2])
AM_CONFIG_HEADER([config.h])

AC_GNU_SOURCE
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_CC
AM_PROG_LEX
AC_PROG_YACC
AM_PATH_LISPDIR

# GCC optimizations
	AC_ARG_ENABLE(optimizations, AC_HELP_STRING([--enable-optimizations],
	[turn on code optimizations (default is yes)]))
	
	if test "$enable_optimizations" != "no"; then
	    if test "x$GCC" = "xyes"; then
			CPULAGS=""
			MY_CFLAGS="-Os -fomit-frame-pointer"
			GCC_TEST_MESSAGE="Checking for gcc version"
			AC_MSG_CHECKING([$GCC_TEST_MESSAGE])
			GCCVERSION="`$CC -dumpversion`"
			GCCMAJOR="`echo $GCCVERSION | cut -c 1`"
			GCCMINOR="`echo $GCCVERSION | cut -c 3`"
			AC_MSG_RESULT([$GCCVERSION])
			if test ["$GCCMAJOR" == "3"] -o ["$GCCMAJOR" == "4"]; then
				#Good! let see if we can see the system arch
				PROCESSOR=`cat /proc/cpuinfo`
				#Is our CPU a Celeron?
			  if test "`echo $PROCESSOR | grep \"Celeron\"`" != ""; then
				  CPUFLAGS="-march=pentium2"
				fi
				if test "`echo $PROCESSOR | grep \"Celeron (Coppermine)\"`" != ""; then
			 		CPUFLAGS="-march=pentium3"
				fi
				#Is our CPU a Pentium?
				if test "`echo $PROCESSOR | grep \"Pentium\"`" != ""; then
					CPUFLAGS="-march=pentium"
				fi
				#Is our CPU a Pentium II?
				if test "`echo $PROCESSOR | grep \"Pentium II\"`" != ""; then
					CPUFLAGS="-march=pentium2"
				fi
				#Is our CPU a Pentium III?
				if test "`echo $PROCESSOR | grep \"Pentium III\"`" != ""; then
					CPUFLAGS="-march=pentium3"
				fi
				#Is our CPU a Pentium 4?
				if test "`echo $PROCESSOR | grep \"Intel(R) Pentium(R) 4\"`" != ""; then
					CPUFLAGS="-march=pentium4"
				fi
				#Is our CPU a Mobile Pentium 4?
				if test "`echo $PROCESSOR | grep \"Intel(R) Pentium(R) M\"`" != ""; then
					if test ["$GCCMAJOR" == "4"] -o ["$GCCMINOR" == "4"]; then
						CPUFLAGS="-march=pentium4m"
					else
						CPUFLAGS="-march=pentium4"
					fi
				fi
				#K6 processor
				if test "`echo $PROCESSOR | grep \"AMD-K6(tm)\"`" != ""; then
				  CPUFLAGS="-march=k6"
				fi
				#Athlon processors
				if test "`echo $PROCESSOR | grep \"AMD Athlon(tm)\"`" != ""; then
				  CPUFLAGS="-march=athlon"
				fi
				if test "`echo $PROCESSOR | grep \"AMD Athlon(tm) MP\"`" != ""; then
				  CPUFLAGS="-march=athlon-mp"
				fi
				if test "`echo $PROCESSOR | grep \"AMD Athlon(tm) XP\"`" != ""; then
				  CPUFLAGS="-march=athlon-xp"
				fi
				if test "`echo $PROCESSOR | grep \"AMD Athlon(tm) 64\"`" != ""; then
				   CPUFLAGS="-march=athlon64"
				fi
				#Is our CPU an Ultra Sparc?
				if test "`echo $PROCESSOR | grep \"UltraSparc\"`" != ""; then
					CPUFLAGS="-mcpu=ultrasparc"
				fi
			else
				#Alas, we can set only generic arch optimizations
				PROCESSOR=`uname -m | grep 86`
				if test "$PROCESSOR" != ""; then
					CPUFLAGS="-march=$PROCESSOR"
				fi
			fi
			if test "$CPUFLAGS" != ""; then
				echo "Applying architecture optimizations: "$CPUFLAGS
			fi
			CFLAGS="$CPUFLAGS $MY_CFLAGS"
		fi
	fi
	
	CFLAGS="-pipe -W -Wall $CFLAGS"

# Check for C headers
	HEADERS="ctype.h fcntl.h grp.h lastlog.h paths.h pthread.h pwd.h stdio.h stdlib.h \
	         signal.h string.h syslog.h termios.h time.h unistd.h linux/kd.h linux/vt.h         \
	         sys/ioctl.h sys/types.h sys/stat.h sys/utsname.h sys/wait.h"
	HEADERS_ERROR_MESSAGE="One or more system headers that are necessary to compile this program are missing on this system. Cannot continue."
	AC_CHECK_HEADERS([$HEADERS],,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])],)
	AC_HEADER_DIRENT
	AC_HEADER_SYS_WAIT
# End check for C headers

# Check functions
	LIBRARIES_ERROR_MESSAGE="One or more function libraries that are necessary to compile this program are missing on this system. Cannot continue."
	AC_CHECK_LIB(crypt, crypt, ,[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , )
	AC_CHECK_LIB(dl, dlopen, ,[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , )
	AC_CHECK_LIB(pthread, pthread_create, ,[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , )
	AC_CHECK_FUNC(getdomainname, [AC_DEFINE(HAVE_getdomainname, 1, [Define if we have function getdomainname])],)
# End check functions

# Whether we should compile qingy mayor mode for emacs
	AC_ARG_ENABLE(emacs, AC_HELP_STRING([--enable-emacs],
	[enable compilation of emacs major mode (default is no)]),, [enable_emacs=no])
	if test "$enable_emacs" == "yes"; then
		AC_MSG_NOTICE([Also compiling qingy major mode for emacs])
	fi
	AM_CONDITIONAL(WANT_EMACS_STUFF, test "$enable_emacs" == "yes")
# End compile emacs stuff

# Check for ncurses
	HEADERS="curses.h term.h"
	NCURSESLIB=""
	AC_CHECK_HEADERS([$HEADERS],,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])],)
	AC_CHECK_LIB(ncurses, setupterm, [NCURSESLIB="-lncurses"],[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , )
	AC_CHECK_LIB(ncurses, tputs,     [NCURSESLIB="-lncurses"],[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , )
	AC_SUBST(NCURSESLIB)
# End check for ncurses

# Check for PAM support
	AC_ARG_ENABLE(pam, AC_HELP_STRING([--enable-pam],
	[turn on PAM support (default is yes)]))
	AC_ARG_ENABLE(shadow, AC_HELP_STRING([--disable-shadow],
	[don't use shadow for authentication]))
	AC_ARG_WITH(pamdir, AC_HELP_STRING([--with-pamdir], [specify where pam directory is]),
        [PAMDIR="$withval"], [PAMDIR="/etc/pam.d"])
	AC_SUBST(PAMDIR)
	USE_PAM=no
	if test "$enable_pam" != "no" -a "$enable_shadow" != "yes" \
    	    || test "$enable_pam" = "yes" -a "$enable_shadow" = "yes"; then
    	    AC_CHECK_LIB(pam, main,
                [
                        USE_PAM=yes
                        PASSWDLIB="-lpam -ldl"
                        AC_DEFINE_UNQUOTED(HAVE_PAM_LIB, 1, [Define if libpam is installed])
                        AC_DEFINE(USE_PAM, 1, [Define if you want qingy to use pam for auth])],
                ,-ldl)
	fi
	if test -z "$PASSWDLIB" \
    	    && ( test "$enable_shadow" != "no" -a "$enable_pam" != "yes" \
    	    || test "$enable_pam" = "yes" -a "$enable_shadow" = "yes" ); then
					AC_CHECK_LIB(shadow, main,[PASSWDLIB="-lshadow"])
    	    AC_CHECK_HEADERS(shadow.h,,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])])
					AC_DEFINE(SHADOW_PASSWD, 1, [Define if you want qingy to use shadow passwords for auth])
	fi
	AC_SUBST(PASSWDLIB)
	AM_CONDITIONAL(USE_PAM, test "$USE_PAM" == "yes")
# End check for PAM support

# Whether we should compile statically
	AC_ARG_ENABLE(static-build, AC_HELP_STRING([--enable-static-build],
	[compile qingy statically (default is no)]),, [enable_static_build=no])
	if test "$enable_static_build" == "yes"; then
		AC_DEFINE(WANT_STATIC, 1, [Define if we should compile statically])
		AC_MSG_NOTICE([qingy will be built as a static binary])
	fi
	AM_CONDITIONAL(WANT_STATIC, test "$enable_static_build" == "yes")
# End compile statically stuff

# Whether we should enable crypto support
	AC_ARG_ENABLE(crypto, AC_HELP_STRING([--enable-crypto=<arg>],
	[make qingy encrypt communications with its user interface. Supported crypto libraries are: none (no encryption), \
	 openssl (openssl RSA encryption), libgcrypt (GNU libgcrypt RSA encryption)]),, [enable_crypto=openssl])
	if test "$enable_crypto" == "openssl"; then
		AC_CHECK_HEADERS([openssl/rsa.h openssl/engine.h openssl/bn.h],,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, RSA_new,            [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, RSA_free,           [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, RSA_generate_key,   [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, RSA_size,           [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, RSA_public_encrypt, [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, RSA_private_decrypt,[CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, BN_hex2bn,          [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(crypto, BN_bn2hex,          [CRYPTOLIB="-lcrypto"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_DEFINE(WANT_CRYPTO,    1, [Define if we should enable crypto support])
		AC_DEFINE(CRYPTO_OPENSSL, 1, [Define what crypto library we should use])
		AC_MSG_NOTICE([qingy will encrypt communications with its user interface using openssl])
		AC_SUBST(CRYPTOLIB)
	elif test "$enable_crypto" == "libgcrypt"; then
		AC_CHECK_HEADERS([gcrypt.h],,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_check_version,       [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_control,             [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_sexp_new,            [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_sexp_build,          [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_pk_genkey,           [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_pk_testkey,          [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_pk_encrypt,          [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_pk_decrypt,          [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_sexp_release,        [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_mpi_release,         [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_sexp_find_token,     [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_sexp_nth_data,       [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_strsource,           [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_strerror,            [CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_CHECK_LIB(gcrypt, gcry_set_progress_handler,[CRYPTOLIB="-lgcrypt"], [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])])
		AC_DEFINE(WANT_CRYPTO,      1, [Define if we should enable crypto support])
		AC_DEFINE(CRYPTO_LIBGCRYPT, 1, [Define what crypto library we should use])
		AC_MSG_NOTICE([qingy will encrypt communications with its user interface using GNU libgcrypt])
		AC_SUBST(CRYPTOLIB)
	elif test ["$enable_crypto" == "none"] -o ["$enable_crypto" == "no"] -o ["$enable_crypto" == "false"]; then
		AC_MSG_NOTICE([qingy will NOT encrypt communications with its user interface])
		enable_crypto="none"
	else
		AC_MSG_ERROR([You specified an incorrect argument to --enable-crypto, see ./configure --help])
	fi
	AM_CONDITIONAL(CRYPTO_OPENSSL,   test ["$enable_crypto" == "openssl"])
	AM_CONDITIONAL(CRYPTO_LIBGCRYPT, test ["$enable_crypto" == "libgcrypt"])
	AM_CONDITIONAL(WANT_CRYPTO, test ["$enable_crypto" == "libgcrypt"] -o ["$enable_crypto" == "openssl"])
# End check for crypto support

# Whether we should disable screen saver support
	AC_ARG_ENABLE(screen-savers, AC_HELP_STRING([--enable-screen-savers],
	[enable support for screen savers (default is yes)]),, [enable_screen_savers=yes])
	if test "$enable_screen_savers" == "yes"; then		
		AC_DEFINE(USE_SCREEN_SAVERS, 1, [Define if we should enable screen saver support])
	else
		AC_MSG_NOTICE([Support for screen savers is disabled])
	fi
	AM_CONDITIONAL(WANT_SCREEN_SAVERS, test "$enable_screen_savers" == "yes")

	AC_ARG_WITH(screen-savers-dir, AC_HELP_STRING([--with-screen-savers-dir], 
		[specify screen savers directory]))
	if test "x$with_screen_savers_dir" != "x"; then
    		SCREENSAVERS_DIR="$with_screen_savers_dir"
	else
    		SCREENSAVERS_DIR="$libdir/$PACKAGE_NAME/screensavers"
	fi
	AC_SUBST(SCREENSAVERS_DIR)
# End screen saver stuff

# Where we should place themes
	AC_ARG_WITH(themes-dir, AC_HELP_STRING([--with-themes-dir], 
		[specify themes directory]))
	if test "x$with_themes_dir" != "x"; then
    		THEMES_DIR="$with_themes_dir"
	else
    		THEMES_DIR="$datadir/$PACKAGE_NAME/themes"
	fi
	AC_SUBST(THEMES_DIR)
# End themes stuff

# Whether we should disable gpm locking support
	AC_ARG_ENABLE(gpm-lock, AC_HELP_STRING([--enable-gpm-lock],
	[enable support for gpm locking (default is yes)]),, [enable_gpm_lock=yes])
	if test "$enable_gpm_lock" == "yes"; then		
		AC_DEFINE(USE_GPM_LOCK, 1, [Define if we should enable gpm locking])
	else
		AC_MSG_NOTICE([Support for gpm locking is disabled])
	fi
# End gpm locking stuff

# Whether we should disable X server support
	AC_ARG_ENABLE(x-support, AC_HELP_STRING([--enable-x-support],
	[enable support for X server (default is yes)]),, [enable_x_support=yes])
	if test "$enable_x_support" == "yes"; then
		XLIBS=""
		AC_CHECK_HEADERS([X11/Xlib.h X11/extensions/scrnsaver.h],,[AC_MSG_ERROR([$HEADERS_ERROR_MESSAGE])],
		[
		#if HAVE_X11_XLIB_H
		# include <X11/Xlib.h>
		# endif
		])
		AC_CHECK_LIB(X11, XOpenDisplay,               [XLIBS="-L/usr/X11R6/lib -lX11"],      [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , [-L/usr/X11R6/lib])
		AC_CHECK_LIB(X11, XCloseDisplay,              [XLIBS="-L/usr/X11R6/lib -lX11"],      [AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , [-L/usr/X11R6/lib])
		AC_CHECK_LIB(Xss, XScreenSaverQueryExtension, [XLIBS="-L/usr/X11R6/lib -lX11 -lXss"],[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , [-L/usr/X11R6/lib])
		AC_CHECK_LIB(Xss, XScreenSaverAllocInfo,      [XLIBS="-L/usr/X11R6/lib -lX11 -lXss"],[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , [-L/usr/X11R6/lib])
		AC_CHECK_LIB(Xss, XScreenSaverQueryInfo,      [XLIBS="-L/usr/X11R6/lib -lX11 -lXss"],[AC_MSG_ERROR([$LIBRARIES_ERROR_MESSAGE])] , [-L/usr/X11R6/lib])
		AC_DEFINE(USE_X, 1, [Define if we should enable X server support])
		AC_SUBST(XLIBS,)
	else
		AC_MSG_NOTICE([Support for X server is disabled])
	fi
# End X server stuff

AC_DEFINE(Linux, 1, [Define if target platform is Linux])

# Whether we should disable DirectFB. Check for DirectFB >= 0.9.24
	AC_ARG_ENABLE(DirectFB-support, AC_HELP_STRING([--enable-DirectFB-support],
	[enable support for DirectFB framebuffer graphics (default is yes)]),, [enable_DirectFB_support=yes])
	if test "$enable_DirectFB_support" == "yes"; then
		DFB_VERSION=0.9.24
		PKG_CHECK_MODULES(DIRECTFB, directfb >= $DFB_VERSION, ,
    	AC_MSG_ERROR([$DIRECTFB_PKG_ERRORS
			*** DirectFB $DFB_VERSION or newer is required. The latest version
			*** of DirectFB is available from http://www.directfb.org/.]))
		AC_DEFINE(USE_DIRECTFB, 1, [Define if we should enable DirectFB support])
	else
		AC_MSG_NOTICE([Support for DirectFB is disabled])
	fi
	AM_CONDITIONAL(USE_DIRECTFB, test "$enable_DirectFB_support" == "yes")
# End check for DirectFB

# Check whether we can determine the distribution we are running in
	AC_MSG_CHECKING([for host distribution])
	DISTRO="unknown"
	PAMDATA="default/qingy"
	GPM_LOCK="none"
	TEMP_FILES_DIR="/var/lib/misc"
	if test "`ls /etc/*release   2>/dev/null | grep \"redhat\"`"    != ""; then
		AC_DEFINE(redhat, 1, [Define if target platform is RadHat Linux])
		DISTRO="redhat"
	fi
	if test "`ls /etc/*release   2>/dev/null | grep \"mandrake\"`"  != ""; then
		AC_DEFINE(mandrake, 1, [Define if target platform is Madrake Linux])
		DISTRO="mandrake"
	fi
	if test "`ls /etc/*release   2>/dev/null | grep \"gentoo\"`"    != ""; then
		AC_DEFINE(gentoo, 1, [Define if target platform is Gentoo Linux])
		DISTRO="gentoo"
		PAMDATA="gentoo/qingy"
		GPM_LOCK="gentoo"
	fi
	if test "`ls /etc/*release 2>/dev/null | grep \"fedora\"`" != ""; then
		AC_DEFINE(fedora, 1, [Define if target platform is Fedora Core Linux])
		DISTRO="fedora"
		GPM_LOCK="fedora"
	fi
	if test "`ls /etc/debian*    2>/dev/null | grep \"debian\"`"    != ""; then
		AC_DEFINE(debian, 1, [Define if target platform is Debian Linux])
		DISTRO="debian"
		PAMDATA="debian/qingy"
	fi
	if test "`ls /etc/slackware* 2>/dev/null | grep \"slackware\"`" != ""; then
		AC_DEFINE(slackware, 1, [Define if target platform is Slackware Linux])
		DISTRO="slackware"
		TEMP_FILES_DIR="/var/lib"
		GPM_LOCK="slackware"
	fi
	if test "`ls /etc/SuSE* 2>/dev/null | grep \"SuSE\"`" != ""; then
		AC_DEFINE(suse, 1, [Define if target platform is SuSE Linux])
		DISTRO="suse"
	fi
	AC_SUBST(PAMDATA,)
	AC_SUBST(GPM_LOCK,)
	AC_SUBST(TEMP_FILES_DIR,)
	AC_MSG_RESULT([$DISTRO])
	gpm_lock_extra_info=""
	if test ["$GPM_LOCK" == "none"] -a ["$enable_gpm_lock" == "yes"]; then
		gpm_lock_extra_info="(unsupported distro)"
	fi
	AM_CONDITIONAL(WANT_GPM_LOCK, test ["$enable_gpm_lock" == "yes"] -a ["$GPM_LOCK" != "none"])
# End check for distribution

	AC_PATH_PROG([XINIT], [xinit],   [/usr/X11R6/bin/xinit],   [$PATH:/usr/X11R6/bin:/usr/bin/X11:/usr/bin:/usr/local/bin])
	AC_PATH_PROG([XFREE], [XFree86], [/usr/X11R6/bin/XFree86], [$PATH:/usr/X11R6/bin:/usr/bin/X11:/usr/bin:/usr/local/bin])
 	if test "$DISTRO" == "slackware"; then
		X_SESSIONS_DIR="/etc/X11/xinit"
	elif test "$DISTRO" == "gentoo"; then
		X_SESSIONS_DIR="/etc/X11/Sessions"
	elif test -e "/etc/X11/gdm/Sessions"; then
		X_SESSIONS_DIR="/etc/X11/gdm/Sessions"
 	else
		X_SESSIONS_DIR="/etc/X11/Sessions"
 	fi
	AC_SUBST(X_SESSIONS_DIR)
	TEXT_SESSIONS_DIR="\$(sysconfdir)/qingy/sessions"
	AC_SUBST(TEXT_SESSIONS_DIR)


AC_CONFIG_FILES([                          \
	Makefile                                 \
	qingy.spec                               \
	src/Makefile                             \
	src/libraries/Makefile                   \
	src/DirectFB/Makefile                    \
	media/Makefile                           \
	media/default/Makefile                   \
	media/gpm-lock/Makefile                  \
	media/sessions/Makefile                  \
	media/pam/Makefile                       \
	media/screensavers/Makefile              \
	media/screensavers/matrix/Makefile       \
	media/screensavers/photos/Makefile       \
	media/screensavers/pixel/Makefile        \
	media/screensavers/running_time/Makefile \
	doc/Makefile
])
AC_OUTPUT

if test "x$USE_PAM" = "xyes"; then
    DISP_PASSWORD_LIBRARY="pam"
else
    DISP_PASSWORD_LIBRARY="shadow"
fi

echo "
Configuration:

  Source code location:       ${srcdir}
  Target distribution:        ${DISTRO}
  Compiler:                   ${CC}
  Compiler flags:             ${CFLAGS}
  
  Password library:           ${DISP_PASSWORD_LIBRARY}
  Screen savers support:      ${enable_screen_savers}
  gpm locking support:        ${enable_gpm_lock} ${gpm_lock_extra_info}
  Crypto support:             ${enable_crypto}
  X support:                  ${enable_x_support}
  DirectFB support:           ${enable_DirectFB_support}
  Libs:                       ${LIBS}
"
